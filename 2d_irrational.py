# -*- coding: utf-8 -*-
"""Untitled1_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ODMIxz4z5XO-2gJnUr8_xaObZIczorNL
"""

import numpy as np
import pandas as pd
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import time

"""$$S_k = m + n -k$$
$$\Omega_k = \frac{m_3}{|m|} + \frac{n_3}{|n|} - \frac{k_3}{|k|}$$

$$|\Omega_k| < \frac{1}{L^{\gamma}}$$

$$|m|, |n|, |k| < L$$

"""

# set up parameters

L = 10
gamma = 2
eps = 1e-07

def count(L, gamma=2, eps=1e-07):
    f = np.sqrt(2)
    counts = []
    for k1 in range(-L, (L+1)):
        for k2 in range(-L, (L+1)):
            
            count = 0
            for m1 in range(-L, (L+1)):
                for m2 in range(-L, (L+1)):
                    
                    for n1 in range(-L, (L+1)):
                        for n2 in range(-L, (L+1)):
                            
                            s1 = m1 + n1 - k1
                            s2 = m2 + n2 - k2
                            
                            if np.abs(s1)<eps and np.abs(s2)<eps:
                                m = np.sqrt(f * m1**2 + m2**2)
                                n = np.sqrt(f * n1**2 + n2**2)
                                k = np.sqrt(f * k1**2 + k2**2)
                                o = m2 / m + n2 / n - k2 / k
                                if  np.abs(o)<(1/L**gamma):
                                    count += 1
            counts.append(count)
    return counts


def main():
    start = time.time()
    #counts = count(L)
    end = time.time()
    print("********* elapsed time (in min) *********")
    print((end - start)/60)
    #pd.DataFrame(counts).to_csv("RNS2dim_10_ir.csv")

    ar = np.genfromtxt("RNS2dim_10.csv",delimiter=',')
    ar = ar[1:, :]
    ar = ar[:, 1:]


    fig = plt.figure(figsize = (8,8))
    ax = fig.add_subplot(111, projection='3d')

    x = np.arange(-L, L+1)
    y = np.arange(-L, L+1)
    c = ar.flatten()

    Y, X = np.meshgrid(x, y)
    X=X.reshape(-1, 1).flatten()
    Y=Y.reshape(-1, 1).flatten()
    print(X)
    print(Y)
    print(c)
    img = ax.scatter(X, Y, c)
    ax.set_xlabel('$k_1$')
    ax.set_ylabel('$k_2$')
    ax.set_zlabel('number of solutions')
    ax.set_title('L=10, rational, 2 dim')
    #ax.view_init(-150, 60)
    plt.show()

if __name__ == "__main__":
    main()

